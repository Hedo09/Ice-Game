Deterministic or Random?
Choose map (0 or 1)
Should the game have a storm after the last player's round? (y/n)
# Item>diggedUp : Item (Rope) state has changed to 'thrownDown'
# Item>pickedUp : Item (Rope) state has changed to 'inHand'
# Item>diggedUp : Item (Tent) state has changed to 'thrownDown'
# Item>pickedUp : Item (Tent) state has changed to 'inHand'
# Item>diggedUp : Item (Shovel) state has changed to 'thrownDown'
# Item>pickedUp : Item (Shovel) state has changed to 'inHand'
init ready
[ E0 ][ ][ R2 ][ ][ ][ ]
[ B ][ E1 ][ ][ R4 ][ ][ ]
[ ][ ][ R3 ][ ][ R5 ][ ]
[ ][ ][ ][ ][ ][ ]
[ ][ ][ ][ ][ ][ ]
[ ][ ][ ][ ][ ][ ]
Which direction? (w,a,s,d)
$ Player>step : Player (PlayerId:0) Transaction 'stepping' began
# Tile>getNeighbour : Neighbour check for Tile (0, 5) in Direction: LEFT 
# Tile>getNeighbour : NeighbourTile (-1, 5)
! Player>step : Player (PlayerId:0) cannot step in that direction(OutBound)
[ E0 ][ ][ R2 ][ ][ ][ ]
[ B ][ E1 ][ ][ R4 ][ ][ ]
[ ][ ][ R3 ][ ][ R5 ][ ]
[ ][ ][ ][ ][ ][ ]
[ ][ ][ ][ ][ ][ ]
[ ][ ][ ][ ][ ][ ]
Which direction? (w,a,s,d)
$ Player>step : Player (PlayerId:0) Transaction 'stepping' began
# Tile>getNeighbour : Neighbour check for Tile (0, 5) in Direction: DOWN 
# Tile>getNeighbour : NeighbourTile (0, 4)
! Player>step : Player (PlayerId:0) cannot step in that direction(PolarBear)
[ E0 ][ ][ R2 ][ ][ ][ ]
[ B ][ E1 ][ ][ R4 ][ ][ ]
[ ][ ][ R3 ][ ][ R5 ][ ]
[ ][ ][ ][ ][ ][ ]
[ ][ ][ ][ ][ ][ ]
[ ][ ][ ][ ][ ][ ]
Which direction? (w,a,s,d)
$ Player>step : Player (PlayerId:0) Transaction 'stepping' began
# Tile>getNeighbour : Neighbour check for Tile (0, 5) in Direction: RIGHT 
# Tile>getNeighbour : NeighbourTile (1, 5)
# Tile>steppedOff : Player left the Tile (0, 5)
# Tile>steppedOn : Player stepped on Tile (1, 5)
Which direction? (w,a,s,d)
$ Player>step : Player (PlayerId:0) Transaction 'stepping' began
# Tile>getNeighbour : Neighbour check for Tile (1, 5) in Direction: DOWN 
# Tile>getNeighbour : NeighbourTile (1, 4)
# Tile>steppedOff : Player left the Tile (1, 5)
# Tile>steppedOn : Player stepped on Tile (1, 4)
Which direction? (w,a,s,d)
$ Player>step : Player (PlayerId:0) Transaction 'stepping' began
# Tile>getNeighbour : Neighbour check for Tile (1, 4) in Direction: RIGHT 
# Tile>getNeighbour : NeighbourTile (2, 4)
# Tile>steppedOff : Player left the Tile (1, 4)
# SnowyHole>steppedOn : Stepped on SnowyHole(2, 4)
# Player>fallInWater : Player (PlayerId:0) falls in Water 
# Player>fallInWater : Player (PlayerId:0) has to wait for rescue 
# Player>passRound : Player (PlayerId:0) passed round
# RoundController>endLastRound : Round end started
# RoundController>endLastRound : Round end ended
# Player>startRound : next Player is 1
Which direction? (w,a,s,d)
$ Player>step : Player (PlayerId:1) Transaction 'stepping' began
# Tile>getNeighbour : Neighbour check for Tile (1, 4) in Direction: RIGHT 
# Tile>getNeighbour : NeighbourTile (2, 4)
# Tile>steppedOff : Player left the Tile (1, 4)
# SnowyHole>steppedOn : Stepped on SnowyHole(2, 4)
# Player>fallInWater : Player (PlayerId:1) falls in Water 
# Player>fallInWater : Player (PlayerId:1) has to wait for rescue 
# Player>passRound : Player (PlayerId:1) passed round
# RoundController>endLastRound : Round end started
# RoundController>endLastRound : Round end ended
# Player>startRound : next Player is 2
[ ][ ][ R2 ][ ][ ][ ]
[ B ][ ][ E0 E1 ][ R4 ][ ][ ]
[ ][ ][ R3 ][ ][ R5 ][ ]
[ ][ ][ ][ ][ ][ ]
[ ][ ][ ][ ][ ][ ]
[ ][ ][ ][ ][ ][ ]
Which direction? (w,a,s,d)
$ Player>savePlayers : Player (PlayerId:2) save started in direction:DOWN
# Tile>getNeighbour : Neighbour check for Tile (2, 5) in Direction: DOWN 
# Tile>getNeighbour : NeighbourTile (2, 4)
$ Player>pullOut : Player (PlayerId:0) Transaction 'pulling out' began
# Tile>getNeighbour : Neighbour check for Tile (2, 4) in Direction: UP 
# Tile>getNeighbour : NeighbourTile (2, 5)
# Tile>steppedOff : Player left the Tile (2, 4)
# Tile>steppedOn : Player stepped on Tile (2, 5)
$ Player>pullOut : Player (PlayerId:1) Transaction 'pulling out' began
# Tile>getNeighbour : Neighbour check for Tile (2, 4) in Direction: UP 
# Tile>getNeighbour : NeighbourTile (2, 5)
# Tile>steppedOff : Player left the Tile (2, 4)
# Tile>steppedOn : Player stepped on Tile (2, 5)
$ Rope>used : Transaction 'savingPeople' was successful
$ Player>savePlayers : Player (PlayerId:2)'s save ended
[ ][ ][ R2 E0 E1 ][ ][ ][ ]
[ B ][ ][ ][ R4 ][ ][ ]
[ ][ ][ R3 ][ ][ R5 ][ ]
[ ][ ][ ][ ][ ][ ]
[ ][ ][ ][ ][ ][ ]
[ ][ ][ ][ ][ ][ ]
# Player>passRound : Player (PlayerId:2) passed round
# RoundController>endLastRound : Round end started
# RoundController>endLastRound : Round end ended
# Player>startRound : next Player is 3
# Player>passRound : Player (PlayerId:3) passed round
# RoundController>endLastRound : Round end started
# RoundController>endLastRound : Round end ended
# Player>startRound : next Player is 4
[ F(F) ][ ][ ][ ][ ][ ]
[ ][ ][ ][ D(F) ][ ][ ]
[ ][ ][ ][ ][ ][ ]
[ ][ SFP(F) ][ SFP(F) ][ ][ ][ ]
[ ][ ][ SFP(F) ][ ][ ][ ]
[ ][ ][ ][ ][ ][ ]
0: D(F)
Which item? 0-0
# Item>diggedUp : Item (DivingSuit) state has changed to 'thrownDown'
$ Player>digItemUp : Player (PlayerId:4) 'digItemUp' is completed
0: D(T)
Which item? 0-0
$ Player>wear : Player (PlayerId:4) now wears DivingSuit
$ DivingSuit>pickedUp : Transaction 'pickingUpDivingSuit' was successful
$ Player>pickUp : Player (PlayerId:4) picked up item
Which direction? (w,a,s,d)
$ Player>step : Player (PlayerId:4) Transaction 'stepping' began
# Tile>getNeighbour : Neighbour check for Tile (3, 4) in Direction: LEFT 
# Tile>getNeighbour : NeighbourTile (2, 4)
# Tile>steppedOff : Player left the Tile (3, 4)
# SnowyHole>steppedOn : Stepped on SnowyHole(2, 4)
# Player>fallInWater : Player (PlayerId:4) falls in Water 
# Player>fallInWater : Player (PlayerId:4) has a diving suit, no worries 
Which direction? (w,a,s,d)
$ Player>step : Player (PlayerId:4) Transaction 'stepping' began
# Tile>getNeighbour : Neighbour check for Tile (2, 4) in Direction: LEFT 
# Tile>getNeighbour : NeighbourTile (1, 4)
# Tile>steppedOff : Player left the Tile (2, 4)
# Tile>steppedOn : Player stepped on Tile (1, 4)
# Player>step : Player (PlayerId:4) has no more workingPoints
# Player>passRound : Player (PlayerId:4) passed round
# RoundController>endLastRound : Round end started
# RoundController>endLastRound : Round end ended
# Player>startRound : next Player is 5
