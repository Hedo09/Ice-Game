@startuml 

title Felder, Gegenst√§nde, Schneesturm - Class Diagram Teil2

class SnowStorm.SnowStorm {
    +void tryStorm() 
} 

abstract class ItemClasses.Item {
    +void thrownDown() 
    +void pickedUp(PlayerClasses.Player Picker)
    +void diggedUp() 
    +void used(PlayerClasses.Player p, ItemClasses.Activity a)
} 

class ItemClasses.Food {
    +void used(PlayerClasses.Player p, ItemClasses.Activity a) <<override>>
} 

class ItemClasses.Rope {
    +void used(PlayerClasses.Player p, ItemClasses.Activity a) <<override>>
} 

class ItemClasses.Shovel {
    +void used(PlayerClasses.Player p, ItemClasses.Activity a) <<override>>
} 

class ItemClasses.DivingSuit {
    +void used(PlayerClasses.Player p, ItemClasses.Activity a) <<override>>
} 

class ItemClasses.SignalFlarePart {
    -int partID 
    +void used(PlayerClasses.Player p, ItemClasses.Activity a) <<override>>
} 

ItemClasses.Item <|-- ItemClasses.SignalFlarePart
ItemClasses.Item <|-- ItemClasses.Food
ItemClasses.Item <|-- ItemClasses.Rope
ItemClasses.Item <|-- ItemClasses.Shovel
ItemClasses.Item <|-- ItemClasses.DivingSuit

class ItemClasses.SignalFlare {
    void putTogether(GlobalControllers.RoundController rc)
} 

ItemClasses.SignalFlarePart "3"--* ItemClasses.SignalFlare
ItemClasses.SignalFlare ..> GlobalControllers.RoundController
ItemClasses.SignalFlare --> GlobalControllers.PositionLUT

abstract class TileClasses.Tile {
    #int x 
    #int y 
    #int snow 
    -boolean igluOn 
    +void steppedOn(PlayerClasses.Player p)
    +void steppedOff(TileClasses.Direction dir)
    +int changeSnow(signed int thisMuch) 
    +TileClasses.Tile getNeighbour(TileClasses.Direction dir)
    +void destroyIglu()
    +void buildIglu()
} 

class TileClasses.StableTile
class TileClasses.UnstableTile {
    -int capacity 
    +int standingHere 
} 

class TileClasses.SnowyHole

TileClasses.Tile <|-- TileClasses.StableTile
TileClasses.Tile <|-- TileClasses.UnstableTile
TileClasses.Tile <|-- TileClasses.SnowyHole


enum ItemClasses.ItemState {
    frozen 
    inHand 
    thrownDown 
} 

enum TileClasses.Direction {
    up 
    down 
    left 
    right 
} 

ItemClasses.Item -down-> ItemClasses.ItemState
TileClasses.Tile --> TileClasses.Direction

class GlobalControllers.PositionLUT << (S,#FF7700) Singleton >> {
    +TileClasses.Tile getPosition(PlayerClasses.Player p)
    +TileClasses.Tile getPosition(ItemClasses.Item i)
    +PlayerClasses.Player[] getPlayersOnTile(TileClasses.Tile t)
    +ItemClasses.Item[] getItemsOnTile(TileClasses.Tile t)
    +TileClasses.Tile getTile(int x, int y)
    +void setPosition(PlayerClasses.Player p)
    +void setPosition(ItemClasses.Item i)
} 

GlobalControllers.PositionLUT "tileList\nTILESNUM" *-- TileClasses.Tile
GlobalControllers.PositionLUT "itemTileMap\n0..7" o-- ItemClasses.Item
GlobalControllers.PositionLUT "tileItemMap\n0..7" o-- ItemClasses.Item

class GlobalControllers.RoundController {
    -int curID 
    +void init(int playerNum) 
    +void startNextRound() 
    +void endLastRound()
    +void lose(String cause) 
    +void win() 
    +PlayerClasses.PlayerContainer getPlayerContainer()
} 

GlobalControllers.RoundController --> "ss"SnowStorm.SnowStorm
GlobalControllers.RoundController --> "it"ItemClasses.Item
GlobalControllers.RoundController --> "t"TileClasses.Tile
GlobalControllers.RoundController --> "sg"ItemClasses.SignalFlare
SnowStorm.SnowStorm --> GlobalControllers.PositionLUT

@enduml
